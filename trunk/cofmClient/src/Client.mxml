<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:p="collab.fm.client.ui.perspective.*" 
	xmlns:v="collab.fm.client.ui.view.*"
	layout="absolute" minWidth="900" minHeight="500"
    width="1000" height="800" backgroundColor="white"
    creationComplete="initView()">
	<mx:Style>
    Tree {
        folderClosedIcon: ClassReference(null);
        folderOpenIcon: ClassReference(null);
        defaultLeafIcon: ClassReference(null);
    }
	</mx:Style>
	<mx:VBox id="appContainer" width="100%" height="100%">
		
		<mx:ApplicationControlBar id="appCB" width="100%" height="30">
		<mx:Canvas width="100%">
			<mx:HBox width="100%">
				<mx:LinkButton paddingLeft="0" paddingRight="0" 
					label="{RS.BTN_FEEDBACK}" click="gotoFeedback();" />
				<mx:LinkButton paddingLeft="0" paddingRight="0" 
					label="{RS.BTN_BACK_TO_HOME}" click="gotoHomePage();" id="btnBack" />
				<mx:Label id="modelName" paddingTop="2" />
				<v:MessageBar width="300"/>
			</mx:HBox>
			<mx:HBox right="2">
				<mx:Label id="userName" paddingTop="2" paddingRight="10" />
				<mx:LinkButton id="btnLogin" paddingLeft="0" paddingRight="0"
				    label="{RS.BTN_LOGIN}" click="showLogin();" />
				<mx:LinkButton id="btnReg" paddingLeft="0" paddingRight="0"
				    label="{RS.BTN_REGISTER}" click="showRegister();" />
				<mx:LinkButton id="btnLogout" paddingLeft="0" paddingRight="0"
				    label="{RS.BTN_LOGOUT}" click="logout();" />
			</mx:HBox>
			
		</mx:Canvas>
			
		</mx:ApplicationControlBar>
		
		<p:EntryPerspective id="entry" width="100%" height="100%">
			
		</p:EntryPerspective>
		
		<p:WorkPerspective id="work" width="100%" height="100%">
			
		</p:WorkPerspective>
	
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import collab.fm.client.command.LogoutCommand;
			import collab.fm.client.ui.view.RegisterDlg;
			import mx.managers.PopUpManager;
			
			import collab.fm.client.ui.view.LoginDlg;
			import flash.net.navigateToURL;
			import collab.fm.client.ui.view.ModelSearchAndCreateForm;
			import collab.fm.client.event.*;
			import collab.fm.client.util.*;
			import collab.fm.client.data.*;

			public static const HOME_PAGE: int = 1;
			public static const WORK_PAGE: int = 2;
			
			private var dlgLogin: LoginDlg;
			private var dlgReg: RegisterDlg;
			
			private var currentPage: int;
			
			private function initView(): void {
				currentPage = HOME_PAGE;
				UIUtil.show(work, false);
				UIUtil.show(btnBack, false);
				UIUtil.show(btnLogin, false);
				UIUtil.show(btnReg, false);
				UIUtil.show(btnLogout, false);
				ClientEvtDispatcher.instance().addEventListener(ModelSelectEvent.SELECTED, onModelSelect);
				ClientEvtDispatcher.instance().addEventListener(ModelUpdateEvent.WORKING_VIEW_COMPLETE, onWorkingViewComplete);
				ClientEvtDispatcher.instance().addEventListener(ClientEvent.CONNECT_SUCCESS, onConnected);
				ClientEvtDispatcher.instance().addEventListener(LoginEvent.SUCCESS, onLogin);
				ClientEvtDispatcher.instance().addEventListener(LoginEvent.LOGOUT, onLogout);
				initData();
				userName.text = "";
			}
			
			private function initData(): void {
				FeatureNameList.instance.data;
			}
			
			private function gotoHomePage(): void {
				UIUtil.show(btnBack, false);
				UIUtil.show(work, false);
				UIUtil.show(entry, true);
				ModelCollection.instance.currentModelId = -1;
				modelName.text = "";
				currentPage = HOME_PAGE;
			}
			
			private function onConnected(evt: ClientEvent): void {
				UIUtil.show(btnLogin, true);
				UIUtil.show(btnReg, true);
				UIUtil.show(btnLogout, false);
			}
			
			private function onModelSelect(evt: ModelSelectEvent): void {
				UIUtil.show(entry, false);
				work.initData(evt.modelId);
				var mName: String = ModelCollection.instance.getModelNameById(evt.modelId);
				modelName.text = RS.M_LIST_CURRENT_NAME + ": " + mName;
			}
			
			private function onWorkingViewComplete(evt: ModelUpdateEvent): void {
				UIUtil.show(work, true);
				UIUtil.show(btnBack, true);
				currentPage = WORK_PAGE;
			}
			
			private function onLogin(evt: LoginEvent): void {
				userName.text = evt.myName;
				// Hide the login and register buttons after logging in.
				UIUtil.show(btnLogin, false);
				UIUtil.show(btnReg, false);
				UIUtil.show(btnLogout, true);
			}
			
			private function onLogout(evt: LoginEvent): void {
				UserList.instance.isLogin = false;
				UserList.instance.myId = -1;
				UserList.instance.myName = "";
				userName.text = "";
				UIUtil.show(btnLogin, true);
				UIUtil.show(btnReg, true);
				UIUtil.show(btnLogout, false);
				if (currentPage == WORK_PAGE) {
					gotoHomePage();
				}
			}
			
			private function gotoFeedback(): void {
				navigateToURL(new URLRequest(
					"http://code.google.com/p/cofm/issues/list"), "_blank");
			}
			
			private function showLogin(): void {
				dlgLogin = LoginDlg(PopUpManager.createPopUp(this, LoginDlg, true));
				PopUpManager.centerPopUp(dlgLogin);
			}
			
			private function showRegister(): void {
				dlgReg = RegisterDlg(PopUpManager.createPopUp(this, RegisterDlg, true));
				PopUpManager.centerPopUp(dlgReg);
			}
			
			private function logout(): void {
				if (currentPage == WORK_PAGE) {
					Alert.show(RS.DLG_LOGOUT_CONFIRM_TEXT, RS.DLG_LOGOUT_CONFIRM_TITLE,
						Alert.YES | Alert.NO, this, onLogoutConfirm, null, Alert.YES); 
				} else {
					new LogoutCommand().execute();
				}
			}
			
			private function onLogoutConfirm(evt: CloseEvent): void {
				if (evt.detail == Alert.YES) {
					new LogoutCommand().execute();
				}
			}
			
		]]>
	</mx:Script>

</mx:Application>
