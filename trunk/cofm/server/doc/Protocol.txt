The protocol defines the format and content of request and response.
All "Dyna" fields and their possible values are listed in protocol.properties.

1. Request
  1.1 Header
    name:String = update|commit|login|logout|connect|listuser
    id:Long = ID of the request, generated by the client.
    user:String = user name.
    address:String = IP:Port address of the client. Set by the server.
  1.2 Body (DynaBean, use get and set method to access body content)
    Body content is store in the "data" field.
    1.2.1 logout, connect, listuser
      data = null
    1.2.2 login
    	data:String = password 
    1.2.3 update
      data = null (may change in the future)
    1.2.4 commit
      data:Object = the feature modeling/voting operation
      data.op:String = addChild|addRequire|addExclude|addName|addDes|setOpt
      data.left:Long/String = ID or Name of the operated feature. The name can NOT start with digit.
      data.right:Long/String = 
        ID or Name of another feature; (for addChild, addRequire, addExclude)
        or the content; (for "addName" and "addDes")
        or null; (for "setOpt")
      data.vote:Boolean = vote yes or no for the operation.
  1.3 Filter Message (for filters)
    // See code(Filterable.java), this part doesn't belong to the protocol
      
2. Response
  2.1 Header (The header will not be sent to the client.)
    type:String = back|peer|broadcast
    targets:List = destination address list (for implementing multi-cast)
  2.2 Body 
    status:String = success|error|denied|forward
      (error means server error, forward means forwarded modeling operation)
    source:Object = The requester who causes this response
      source.id:Long = Requester ID
      source.name:String = Requester Name
      source.user:String = Requester User
      source.address:String = Requester Address
    data:DynaBean, use get and set to access this field.
      2.2.1 For login, connect and commit, just answer the request
        data:String = message. e.g. if an error occurred.
      2.2.2 For update
        data:List of Feature, where Feature is a Java Bean so that can be JSON serialized and persisted.
      2.2.3 For commit
        data:Object = commit.data
      2.2.4 For listuser
        data:List of User = [
          id:Long = user id
          name:String = user name
        ]
  2.3 Filter Message (see 1.3)

3. Feature Bean
  The Feature mentioned in section 2.2.2 is defined as follows:
  id:Long = ID of the feature, generated by persistent layer.(e.g. a database)
  existence:Votable<Boolean> = Whether the feature should be existed.
  mandatory:Votable<Boolean> = Whether the feature is mandatory.
  names:List of Votable<String> = feature name candidates
  descriptions:List of Votable<String> = feature description candidates
  require:List of Votable<Long> = required feature IDs
  exclude:List of Votable<Long> = excluded feature IDs
  children: List of Votable<Long> = children IDs
  
  The Votable<T> is defined as follows:
  value:T = the value to be voted
  support:List of Long = ID of users who voted yes.
  against:List of Long = ID of users who voted no.
  
  NOTE: The Feature and Votable MUST BE THREAD-SAFE, because multiple users can modify the same feature simultaneously. 
  
  
4. Interprete the response
  For each request(ID=xxx), the server will send a response contains the request ID, 
so the client can read the "status" to know whether a request has succeed.
      
      
  
        
 