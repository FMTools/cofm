<?xml version="1.0" encoding="utf-8"?>
<mx:Tree xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 labelField="@name"
		 showRoot="false"
		 itemClick="onItemClicked(event);"
		 itemOpen="onItemOpened(event);"
		 itemClose="onItemClosed(event);"
		 render="onRendering(event);"
		 itemRenderer="cofm.component.fm.FeatureTreeItemRenderer"
		 creationComplete="initView();">
	
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Script>
		<![CDATA[
			import cofm.command.*;
			import cofm.event.*;
			import cofm.model.RefinementTreeData;
			import cofm.util.*;
			
			import mx.controls.Alert;
			import mx.events.ListEvent;
			import mx.events.TreeEvent;
			
			private var lastSelectedFeatureId: int = -1;
			
			private var lastOpenedItems: Object = new Object();
			
			private var forceReopen: Boolean = false;
			
			public var rootNode: Object;
			
			public var treeName: String;
			
			private function initView(): void {
				ClientEvtDispatcher.instance().addEventListener(OperationCommitEvent.BEFORE_MODEL_UPDATE, onDataChanged);
			}
			
			private function onItemClicked(evt: ListEvent): void {
				
				var curId: int = int(selectedItem.@id);
				var eventType: String;
				if (String(selectedItem.@kind) == RefinementTreeData.KIND_CLASS) {
					eventType = FeatureSelectEvent.TYPE_SELECTED;
				} else {
					eventType = FeatureSelectEvent.FEATURE_SELECTED;
				}
				if (lastSelectedFeatureId != curId) {
					// Broadcast the selection
					ClientEvtDispatcher.instance().dispatchEvent(
						new FeatureSelectEvent(eventType,
							curId, selectedItem.@name));
					if (eventType == FeatureSelectEvent.FEATURE_SELECTED) {
						new StartEditFeatureCommand(curId).execute();
					}
				}
				lastSelectedFeatureId = curId;
			}
			
			private function onItemOpened(evt: TreeEvent): void {
				this.lastOpenedItems = this.openItems;
			}
			
			private function onItemClosed(evt: TreeEvent): void {
				this.lastOpenedItems = this.openItems;
			}
			
			private function onRendering(evt: Event): void {
				if (forceReopen) {
//					Alert.show("reopen " + treeName, "");
//					for each (var i: Object in this.lastOpenedItems) {
//						Alert.show("node", "");
//						this.expandItem(i, true);
//					}
					forceReopen = false;
				}	
			}
			
			private function onDataChanged(evt: OperationCommitEvent): void {
				forceReopen = true;
			}
		]]>
	</fx:Script>
</mx:Tree>
