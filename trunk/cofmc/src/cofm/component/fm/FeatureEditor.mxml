<?xml version="1.0" encoding="utf-8"?>
<s:SkinnableContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
					  xmlns:s="library://ns.adobe.com/flex/spark" 
					  xmlns:mx="library://ns.adobe.com/flex/mx"
					  implements="cofm.model.IOperationListener"
					  creationComplete="initView();">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import cofm.command.*;
			import cofm.event.*;
			import cofm.model.*;
			import cofm.util.*;
			
			import spark.components.NavigatorContent;
			
			private static const BASIC_INFO_KEY: int = 0;
			
			private var tabMap: Dictionary = new Dictionary();
			
			private var featureId: int;
			
			private function initView(): void {
				Model.instance().registerSubView(this);
				ClientEvtDispatcher.instance().addEventListener(
					FeatureSelectEvent.FEATURE_SELECTED, onSelect);
				ClientEvtDispatcher.instance().addEventListener(
					FeatureSelectEvent.TYPE_SELECTED, onTypeSelect);
				ClientEvtDispatcher.instance().addEventListener(
					ClientEvent.CURRENT_FEATURE_DELETED, onDelete);
				ClientEvtDispatcher.instance().addEventListener(
					ClientEvent.BASIC_INFO_UPDATED, onBasicInfoUpdated);
			}
			
			private function onTypeSelect(evt: FeatureSelectEvent): void {
				if (this.featureId == evt.id) {
					return;
				}	
				this.featureId = evt.id;
				tabNav.removeAllChildren();
			}
			
			private function onSelect(evt: FeatureSelectEvent): void {
				if (this.featureId == evt.id) {
					// Prevent repeatly refresh
					return;
				}
				this.featureId = evt.id;
				this.reloadAllTabs();
			}
			
			private function onDelete(evt: ClientEvent): void {
				this.featureId = -1;
			}
			
			private function onBasicInfoUpdated(evt: ClientEvent): void {
				var basicInfo: Object = this.tabMap[BASIC_INFO_KEY];
				if (basicInfo != null) {
					FeatureBasicInfo(basicInfo).updateBasicInfo();
				}
			}
			
			private function reloadAllTabs(): void {
				tabNav.removeAllChildren();
				this.tabMap = new Dictionary();
				
				// Insert the Basic_info_tab first
				var basic: FeatureBasicInfo = new FeatureBasicInfo();
				basic.width = Size.EDITOR_W;
				basic.height = Size.EDITOR_H;
				var tabWrapper: NavigatorContent = new NavigatorContent();
				tabWrapper.addElement(basic);
				tabWrapper.label = RS.m_fe_basic_tab;
				basic.updateBasicInfo();
				this.tabNav.addChild(tabWrapper);
				this.tabMap[BASIC_INFO_KEY] = basic;
				
				var allAttrDefs: XMLList = Model.instance().getAttrDefsOfEntity(
					CurrentFeature.instance().element);
				
				// Add name and description 
				addTab(CurrentFeature.instance().element,
					allAttrDefs.(@name==Cst.ATTR_FEATURE_NAME)[0]);
				addTab(CurrentFeature.instance().element,
					allAttrDefs.(@name==Cst.ATTR_FEATURE_DES)[0]);	
				
				var tabWrapper2: NavigatorContent = new NavigatorContent();
				var ref: RefinementSheet = new RefinementSheet();
				ref.width = Size.EDITOR_W;
				ref.height = Size.EDITOR_H;
				tabWrapper2.addElement(ref);
				tabWrapper2.label = RS.m_fe_refine_tab;
				this.tabNav.addChild(tabWrapper2);
				
				var tabWrapper3: NavigatorContent = new NavigatorContent();
				var cons: BinConstaintSheet = new BinConstaintSheet();
				cons.width = Size.EDITOR_W;
				cons.height = Size.EDITOR_H;
				cons.dataSource = CurrentFeature.instance().binaryConstraints;
				cons.info = "Binary constaints on current entity instance: ";
				tabWrapper3.addElement(cons);
				tabWrapper3.label = RS.m_fe_cons_tab;
				this.tabNav.addChild(tabWrapper3);
				
				//TODO: Add refinement and binary constraints
				/*var refine: RefinementTab = new RefinementTab();
				refine.label = RS.EDIT_TAB_REFINE;
				setTabSize(refine);
				infoTab.addChild(refine);
				
				var cons: BinConstraintTab = new BinConstraintTab();
				cons.label = RS.EDIT_TAB_CONS;
				setTabSize(cons);
				infoTab.addChild(cons);
				*/
				
				// Add other tabs
				for each (var def: Object in allAttrDefs) {
					if (def.@name != Cst.ATTR_FEATURE_DES &&
						def.@name != Cst.ATTR_FEATURE_NAME) {
						addTab(CurrentFeature.instance().element, def);
					}
				}
				
				tabNav.selectedIndex = 0;
			}
			
			// 
			private function addTab(entity: XML, attrDef: Object): void {
				// Get the attribute instance in current feature, if there's no such 
				// item in current feature, then add tab according to the attrSetItem
				if (entity == null || attrDef == null) {
					return;
				}
				var attr: XML = Model.instance().getAttrById(
					entity,
					String(attrDef.@id));
				if (attr == null) {
					attr = XML(attrDef);
				}
				
				var tabWrapper: NavigatorContent = new NavigatorContent();
				var sheet: AttributeSheet = 
					AttributeSheetFactory.createAttributeSheet(attr..value, XML(attrDef));
				tabWrapper.addElement(sheet);
				tabWrapper.label = sheet.attributeName;
				this.tabNav.addChild(tabWrapper);
				// Manage this tab by the tabMap.
				this.tabMap[sheet.attributeId] = sheet; 
			}
			
			// IOperationListener methods
			public function handleEditAddEntityType(op: Object): void {
				// do nothing
			}
			
			public function handleEditAddBinRelType(op: Object): void {
				// do nothing
			}
			
			public function handleVoteAddEntity(op: Object): void {
				// Only handles the removal of current feature
				if (op["entityId"] == String(this.featureId) &&
					op[Model.SHOULD_DELETE_ELEMENT] == true) {
					tabNav.removeAllChildren();
				}
			}
			
			public function handleVoteAddBinRel(op: Object): void{
				// Do nothing (the relationship tabs will update themselves.)
			}
			
			public function handleEditAddAttributeDef(op: Object): void {
				// Do nothing (only add tab when creating new values)
			}
			
			public function handleEditAddEnumAttributeDef(op: Object): void {
				// Do nothing
			}
			
			public function handleEditAddNumericAttributeDef(op: Object): void {
				// Do nothing
			}
			
			public function handleVoteAddValue(op: Object): void {
				if (op["entityId"] == String(this.featureId)) {
					var entity: XML = Model.instance().getEntityById(String(op["entityId"]));
					if (entity == null) {
						return;
					}
					var a: XML = Model.instance().getAttrById(entity,
						String(op["attrId"]));
					if (a == null) {
						return;
					}
					
					var def: XML = Model.instance().getAttrDefById(
						entity, String(op["attrId"]));
					if (def == null) {
						return;
					}
					
					// If the attribute tab hasn't been created...
					if (this.tabMap[String(op["attrId"])] == null) {
						this.addTab(entity, def);
					} else {
						AttributeSheetFactory.setValuesForSheet(
							AttributeSheet(this.tabMap[String(op["attrId"])]), 
							a..value,
							def);
					}
				}
			}
			
			public function handleInferVoteOnEntity(op: Object): void {
				// Do nothing (because only YES votes can be inferred, and this change can be updated in 
				// Basic Info Tab
			}
			
			public function handleInferVoteOnRelation(op: Object): void {
				// Do nothing (Changes will be reflected in relationship tabs)
			}
		]]>
	</fx:Script>
	
	<mx:TabNavigator id="tabNav" />
</s:SkinnableContainer>
