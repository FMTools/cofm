<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="660" height="580"
			   title="Create a model" xmlns:common="cofm.component.common.*"
			   close="onCancel();"
			   creationComplete="initView();">
	<s:states>
		<s:State name="Basic"/>
		<s:State name="EntityBegin" stateGroups="Entity"/>
		<s:State name="TypeSelected" stateGroups="Entity"/>
		<s:State name="AttrSelected" stateGroups="Entity"/>
		<s:State name="RelationSelected" stateGroups="Relation"/>
		<s:State name="RelationUnselected" stateGroups="Relation"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import cofm.command.*;
			import cofm.command.composite.*;
			import cofm.event.*;
			import cofm.model.*;
			import cofm.util.*;
			
			import mx.collections.XMLListCollection;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			private static const TO_BE_DELETED: String = "____TO_BE_DELETED____";
			private var typeId: int = 1;
			
			private var selectedTypeId: int;
			
			[Bindable] public var allowClose: Boolean;
			
			public var autoClose: Boolean;
			
			[Bindable] public var modelName: String;
			
			[Bindable]
			public var entityTypeList: XMLListCollection = new XMLListCollection();
			
			[Bindable]
			public var entityTypes: XMLListCollection = 
				new XMLListCollection(new XMLList(
					<et><et id="1" name="Feature"/></et>));
			
			[Bindable]
			public var entityAttrs: XMLListCollection = 
				new XMLListCollection(new XMLList(
					<et id="1">
						<attrDef name={Cst.ATTR_FEATURE_NAME} type={Cst.ATTR_TYPE_STRING} multi="true" dup="false"/>
						<attrDef name={Cst.ATTR_FEATURE_DES} type={Cst.ATTR_TYPE_TEXT} multi="true" dup="true"/>
						<attrDef name={Cst.ATTR_FEATURE_OPT} type={Cst.ATTR_TYPE_ENUM} multi="false" dup="true">
							<enums>
								<enum>{Cst.VAL_OPT_MAN}</enum>
								<enum>{Cst.VAL_OPT_OPT}</enum>
							</enums>
						</attrDef>
					</et>));
			
			private static const nameAttrXml: XML = <attrDef name={Cst.ATTR_FEATURE_NAME} type={Cst.ATTR_TYPE_STRING} multi="true" dup="false"/>;
			private static const desAttrXml: XML = <attrDef name={Cst.ATTR_FEATURE_DES} type={Cst.ATTR_TYPE_TEXT} multi="true" dup="true"/>;
			
			private static const defaultRelation: XML = 
				<binrel>
					<binrel name={Cst.BIN_REL_REQUIRES} dir="true" hier="false" left="1" right="1"
							leftName="Feature" rightName="Feature" />
					<binrel name={Cst.BIN_REL_EXCLUDES} dir="false" hier="false" left="1" right="1"
							leftName="Feature" rightName="Feature" />
				</binrel>;
			
			[Bindable]
			public var binRelations: XMLListCollection = new XMLListCollection(defaultRelation.binrel);
			
			private function initView(): void {
				ClientEvtDispatcher.instance().addEventListener(
					ModelSelectEvent.SELECTED, onModelSelected);
			}
			
			public function closeDlg(): void {
				ClientEvtDispatcher.instance().removeEventListener(
					ModelSelectEvent.SELECTED, onModelSelected);
				onCancel();
			}
			
			private function onModelSelected(evt: ModelSelectEvent): void {
				if (autoClose) {
					closeDlg();
				}
			}
			
			// return the root of entityTypes
			private function etRoot(): XML {
				return XML(entityTypes.getItemAt(0));
			}
			
			private function resetEntityNamesInRelations(): void {
				var brs: XML = <brs/>;
				for each (var binrel: Object in binRelations.source) {
					var ln: String = getEntityNameById(String(binrel.@left));
					var rn: String = getEntityNameById(String(binrel.@right));
					if (ln != null && rn != null) {
						binrel.@leftName = ln;
						binrel.@rightName = rn;
						brs.appendChild(binrel);
					}
				}
				binRelations.source = brs.binrel;
			}
			
			private function getEntityNameById(id: String): String {
				var entities: XMLList = this.etRoot()..et.(@id==id);
				if (entities.length() > 0) { 
					return entities[0].@name;
				}
				return null;
			}
			
			private function onTypeClicked(evt: ListEvent): void {
				this.currentState = "TypeSelected";	
				
				attrGrid.dataProvider = 
					entityAttrs.source.(@id==String(typeTree.selectedItem.@id))[0].attrDef;
				
				selectedTypeId = int(typeTree.selectedItem.@id);
				
				attrForm.reset();
			}
			
			private function onNewType(): void {
				var n: XML = <et id={++typeId} name="Enter type name here"/>;
				etRoot().appendChild(n);
				typeTree.selectedItem = n;
				
				var nAttrs: XML = n.copy();
				// Add the default attributes.
				nAttrs.appendChild(nameAttrXml.copy());
				nAttrs.appendChild(desAttrXml.copy());
				entityAttrs.addItem(nAttrs);
			}
			
			private function onNewSubtype(): void {
				var n: XML = <et id={++typeId} name="Enter type name here"/>;
				var parent: XML = XML(etRoot()..et.(@id==String(typeTree.selectedItem.@id))[0]);
				parent.appendChild(n);
				//typeTree.selectedItem = n;
				
				// A subtype inherits all attributes from its parent.
				var pid: String = String(parent.@id);
				var parentAttrs: XML = entityAttrs.source.(@id==pid)[0];
				var subAttrs: XML = parentAttrs.copy();
				subAttrs.@id = n.@id;
				entityAttrs.addItem(subAttrs);
			}
			
			private function onDeleteType(): void {
				var enId: String = String(typeTree.selectedItem.@id); 
				// Delete entity type and its attributes
				delete etRoot()..et.(@id==enId)[0];
				delete entityAttrs.source.(@id==enId)[0];
				
				// Force user to select another type to delete or add subtype.
				currentState = "EntityBegin";
				typeTree.selectedIndex = -1;  // Make sure no item is selected on the tree.
			}
			
			private function onAttributeClicked(): void {
				this.currentState = "AttrSelected";
				attrForm.attrXml = XML(attrGrid.selectedItem);
			}
			
			private function onAttributeChanged(): void {
				var cur: XML = attrForm.attrXml;
				if (this.currentState == "AttrSelected") {
					// Replace the selected attribute with the edited one.
					var old: XML = XML(attrGrid.selectedItem);
					old.@name = cur.@name;
					old.@type = cur.@type;
					old.@multi = cur.@multi;
					old.@dup = cur.@dup;
					old.setChildren(cur.children());
					
				} else {
					// Add the new attribute
					XML(entityAttrs.source.(@id==selectedTypeId)[0]).appendChild(cur.copy());
					attrGrid.dataProvider = 
						entityAttrs.source.(@id==selectedTypeId)[0].attrDef;
				}
				this.currentState = "TypeSelected";
				attrGrid.selectedIndex = -1;  // Make sure the attribute grid is not selected.
				attrForm.reset();
			}
			
			private function onRelationClicked(): void {
				this.currentState = "RelationSelected";
				var r: XML = XML(relationGrid.selectedItem);
				relationNameInput.text = r.@name;
				leftTypeSelect.selectedItem = entityTypeList.source.(@id==r.@left)[0];
				rightTypeSelect.selectedItem = entityTypeList.source.(@id==r.@right)[0];
				//hierCheck.selected = ModelUtil.isTrue(String(r.@hier));
				dirCheck.selected = ModelUtil.isTrue(String(r.@dir));
			}
			
			private function isValidRelation(): Boolean {
				// name must not be used.
				var names: XMLList = binRelations.source.(@name==relationNameInput.text);
				if (names.length() > 0) {
					return false;
				}
				return true;
			}
			
			private function onRelationChanged(): void {
				if (this.currentState == "RelationSelected") {
					var old: Object = relationGrid.selectedItem;
					old.@name = relationNameInput.text;
					old.@left = leftTypeSelect.selectedItem.@id;
					old.@right = rightTypeSelect.selectedItem.@id;
					old.@leftName = leftTypeSelect.selectedItem.@name;
					old.@rightName = rightTypeSelect.selectedItem.@name;
					//old.@hier = hierCheck.selected;
					old.@hier = false;
					old.@dir = dirCheck.selected;
				} else if (isValidRelation()) {
					binRelations.addItem(<binrel 
						name={relationNameInput.text}
						left={leftTypeSelect.selectedItem.@id}
						right={rightTypeSelect.selectedItem.@id}
						leftName={leftTypeSelect.selectedItem.@name}
						rightName={rightTypeSelect.selectedItem.@name}
						hier="false"
						dir={dirCheck.selected} />);
					//hier={hierCheck.selected}
				}
				this.currentState = "RelationUnselected";
				relationGrid.selectedIndex = -1;
			}
			
			private function onRelationDeleted(): void {
				var n: String = String(relationGrid.selectedItem.@name);
				var r:XML = XML(binRelations.source.(@name==n)[0]);
				binRelations.removeItemAt(binRelations.getItemIndex(r));
				this.currentState = "RelationUnselected";
				relationGrid.selectedIndex = -1;
			}
			
			private function onBack(): void {
				switch (this.currentState) {
					case "EntityBegin":
					case "TypeSelected":
					case "AttrSelected":
						this.currentState = "Basic";
						break;
					case "RelationSelected":
					case "RelationUnselected":
						this.currentState = "EntityBegin";
						break;
				}
			}
			
			private function onNext(): void {
				switch (this.currentState) {
					case "Basic":
						this.currentState = "EntityBegin";
						break;
					case "EntityBegin":
					case "TypeSelected":
					case "AttrSelected":
						this.currentState = "RelationUnselected";
						// Init entityTypeList
						entityTypeList.source = entityTypes.source..et;
						// Init relations' names.
						resetEntityNamesInRelations();
						break;
					case "RelationSelected":
					case "RelationUnselected":
						if (this.autoClose) {
							nextBtn.enabled = false;
						}
						doCreateModel();
						break;
				}	
			}
			
			private function onCancel(): void {
				PopUpManager.removePopUp(this);
			}
			
			private function doCreateModel(): void {
				// Build the model information object for CreateModelCompositeCommand
				var etArray: Array = new Array();
				for each (var top: Object in this.etRoot().et) {
					buildEntypeHierarchy(XML(top), etArray);
				}
				
				var btArray: Array = new Array();
				for each (var binrel: Object in binRelations.source) {
					btArray.push({
						typeName: binrel.@name,
						sourceId: binrel.@left,
						targetId: binrel.@right,
						hier: binrel.@hier,
						dir: binrel.@dir
					});
				}
				
				// Build a refinement relation for each root entity type by default.
				for each (var rootType: Object in this.etRoot().et) {
					btArray.push({
						typeName: rootType.@name + "_" + Cst.BIN_REL_REFINES,
						sourceId: rootType.@id,
						targetId: rootType.@id,
						hier: true,
						dir: true
					});
				}
				
				var info: Object = {
					name: nameInput.text,
					description: introInput.text,
					entypes: etArray,
					bintypes: btArray
				};
				
				new CreateModelCompositeCommand(info).execute();
			}
			
			private function buildEntypeHierarchy(top: XML, dst: Array): void {
				var superId: int = -1;
				var entype: XML = top;
				do {
					dst.push(buildEntype(entype, superId));
					superId = int(entype.@id);
					entype = entype.et[0];
				} while (entype != null);
			}
			
			private function buildEntype(et: XML, superId: int): Object {
				var attrDefs: Array = new Array();
				var defs: XMLList = entityAttrs.source.(@id==String(et.@id));
				if (defs.length() > 0) {
					for each (var def: Object in defs[0].attrDef) {
						var d: Object = {
							name: def.@name,
							type: def.@type,
							multi: def.@multi,
							dup: def.@dup
						};
						if (Cst.ATTR_TYPE_ENUM == String(def.@type)) {
							var es: Array = new Array();
							for each (var e: Object in def.enums.enum) {
								es.push(XML(e).text().toString());
							}
							d.enums = es;
						} else if (Cst.ATTR_TYPE_NUMBER == String(def.@type)) {
							d.min = def.min.text().toString();
							d.max = def.max.text().toString();
							d.unit = def.unit.text().toString();
						}
						attrDefs.push(d);
					}
				}
				var rslt: Object = {
					id: et.@id,
						typeName: et.@name,
						superId: superId,
						typeId: -1,      // typeId is unknown before creation
						attrDefs: attrDefs
				};
				return rslt;
			}
		]]>
	</fx:Script>
	<mx:Form width="100%" height="490" includeIn="Basic">
		<mx:FormHeading label="Basic Information"/>
		<mx:FormItem label="Name">
			<s:TextInput widthInChars="20" id="nameInput" text="{modelName}"/>
		</mx:FormItem>
		<mx:FormItem label="Intro">
			<s:TextArea width="300" height="152" id="introInput"/>
		</mx:FormItem>
	</mx:Form>
	
	<s:VGroup width="100%" height="400" includeIn="Entity" paddingTop="10">
		<s:Label fontSize="12" top="5" left="5" text="Define the types of entities in this model."/>
		<s:HGroup width="100%" height="100%">
			<s:VGroup width="50%" height="100%">
				<s:HGroup>
					<s:Button label="New Type" click="onNewType();"/>
					<s:Button label="New Subtype" 
							  enabled="true" enabled.EntityBegin="false" 
							  click="onNewSubtype();"/>
					<s:Button label="Delete Type"
							  enabled="true" enabled.EntityBegin="false"
							  click="onDeleteType();"/>
				</s:HGroup>
				<s:Label fontWeight="bold" text="Current types:"/>
				<mx:Tree id="typeTree" dataProvider="{entityTypes}"
						 borderStyle="solid" width="100%" height="100%"
						 labelField="@name" itemClick="onTypeClicked(event);"
						 editable="true" showRoot="false"/>
			</s:VGroup>
			
			<s:VGroup width="50%" height="100%" includeIn="AttrSelected, TypeSelected">
				<s:Label fontWeight="bold" text="Attributes: "/>
				
			    <mx:DataGrid id="attrGrid" rowCount="6" itemClick="onAttributeClicked();"
							 width="100%">
					<mx:columns>
						<mx:DataGridColumn dataField="@name" headerText="Name" />
						<mx:DataGridColumn dataField="@type" headerText="Type" />
					</mx:columns>
				</mx:DataGrid>
				<s:Label fontWeight="bold" 
						 text.TypeSelected="Add attribute: "
						 text.AttrSelected="Edit attribute: "/>
				<common:AttributeForm id="attrForm" submit="onAttributeChanged();"/>
			</s:VGroup>
		</s:HGroup>
	</s:VGroup>
	
	<s:VGroup width="100%" height="400" paddingTop="10" includeIn="Relation">
		<s:Label text="Define the types of constraints in this model. (Only binary constraints now.)"/>
		
		<mx:DataGrid id="relationGrid" rowCount="10" width="100%"
					 itemClick="onRelationClicked();"
					 dataProvider="{binRelations}">
			<mx:columns>
				<mx:DataGridColumn dataField="@name" headerText="Name"/>
				<!--<mx:DataGridColumn dataField="@hier" headerText="Is Refinement"/>-->
				<mx:DataGridColumn dataField="@dir" headerText="Is Directed"/>
				<mx:DataGridColumn dataField="@leftName" headerText="Entity Type 1">
				</mx:DataGridColumn>
				<mx:DataGridColumn dataField="@rightName" headerText="Entity Type 2"/>
			</mx:columns>
		</mx:DataGrid>
		
		<mx:Form>
			<mx:FormItem label="Constraint Name">
				<s:TextInput widthInChars="20" id="relationNameInput" />
			</mx:FormItem>
			<mx:FormItem label="End Types" direction="horizontal">
				<s:Label text="Left"/>
				<s:ComboBox id="leftTypeSelect"
						    dataProvider="{entityTypeList}"
						    requireSelection="true"
						    labelField="@name" />
				<s:Label text="Right" />
				<s:ComboBox id="rightTypeSelect"
							dataProvider="{entityTypeList}"
							requireSelection="true"
							labelField="@name" />
			</mx:FormItem>
			<mx:FormItem direction="horizontal">
				<!--<s:CheckBox id="hierCheck" label="Is Refinement" />
				<mx:Spacer />-->
				<s:CheckBox id="dirCheck" label="Is Directed" />
			</mx:FormItem>
			<mx:FormItem direction="horizontal">
				<s:Button label.RelationSelected="Save changes" label.RelationUnselected="Create a new one" 
						  click="onRelationChanged();" />
				<s:Button label="Delete" enabled.RelationUnselected="false"
						  enabled.RelationSelected="true" 
						  click="onRelationDeleted();" />
			</mx:FormItem>
		</mx:Form>
	</s:VGroup>
	
	<mx:Canvas height="30" width="100%" bottom="10">
		<s:HGroup right="10">
			<s:Button label="&lt; Back" enabled.Basic="false" click="onBack();"/>
			<s:Button id="nextBtn" label="Next &gt;" label.Relation="Finish" click="onNext();"/>
			<s:Button label="Cancel" click="onCancel();" visible="{allowClose}"/>
		</s:HGroup>
	</mx:Canvas>
	
</s:TitleWindow>
