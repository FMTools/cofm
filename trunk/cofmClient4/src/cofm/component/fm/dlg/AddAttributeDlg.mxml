<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   width="640" height="350"
			   title="{RS.m_ca_title}">
	<s:layout>
		<s:HorizontalLayout/>
	</s:layout>
	<s:states>
		<s:State name="StringLike"/>
		<s:State name="Enum"/>
		<s:State name="Number"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import cofm.command.*;
			import cofm.event.*;
			import cofm.model.*;
			import cofm.util.*;
			
			import mx.managers.PopUpManager;
			import mx.utils.StringUtil;
			
			import spark.events.IndexChangeEvent;
			
			private static const MAX_ENUM_LENGTH: int = 40;
			private static const ENUM_INPUT_WIDTH: int = 110;
			
			private function onTypeChange(evt: IndexChangeEvent): void {
				var type: String = evt.currentTarget.selectedItem.label;
				switch (type) {
					case Cst.ATTR_TYPE_ENUM:
						currentState = "Enum";
						break;
					case Cst.ATTR_TYPE_NUMBER:
						currentState = "Number";
						break;
					default:
						currentState = "StringLike";
						break;
				}
			}
			
			private function doAddEnumRow(evt: MouseEvent): void {
				// Add the xml:
				//   <HGroup>
				//     <TextInput 1>
				//     <TextInput 2>
				//   </HGroup>
				// before the "AddRow" LinkButton.
				var hg: HGroup = new HGroup();
				var t1: TextInput = new TextInput();
				var t2: TextInput = new TextInput();
				t1.maxChars = MAX_ENUM_LENGTH;
				t2.maxChars = MAX_ENUM_LENGTH;
				t1.width = ENUM_INPUT_WIDTH;
				t2.width = ENUM_INPUT_WIDTH;
				hg.addElement(t1);
				hg.addElement(t2);
				
				var btn: LinkButton = LinkButton(evt.currentTarget);
				var formItem: FormItem = FormItem(btn.parent);
				formItem.addElementAt(hg, formItem.getChildren().length - 1); // before the btn.
			}
			
			private function doAddAttribute(): void {
				var aName: String = StringUtil.trim(nameInput.text);
				// Make sure the name is not empty, and does not exist in the fm's attribute set.
				if (aName == "" || 
					XMLList(Model.instance().attrs.source.(@name==aName)).length() > 0) {
					return;
				}
				
				var aType: String = typeSelect.selectedItem.label;
				switch (aType) {
					case Cst.ATTR_TYPE_ENUM:
						var values: Array = getEnumValues();
						if (values.length > 0) {
							new AddEnumAttributeCommand(aName, values).execute();
						}
						break;
					case Cst.ATTR_TYPE_NUMBER:
						var min: Number = Number(minInput.text);
						var max: Number = Number(maxInput.text);
						var unit: String = StringUtil.trim(unitInput.text);
						if (!isNaN(min) && !isNaN(max) && unit != "") {
							new AddNumericAttributeCommand(aName, min, max, unit).execute();
						}
						break;
					default:
						new AddAttributeCommand(aName, aType).execute();
						break;
				}
			}
			
			private function getEnumValues(): Array {
				var result: Array = [];
				for each (var hg: Object in enumValues.getChildren()) {
					if (hg is HGroup) {
						for (var i: int = 0; i < HGroup(hg).numElements; i++) {
							var o: Object = HGroup(hg).getElementAt(i);
							if (o is TextInput && StringUtil.trim(TextInput(o).text) != "") {
								result.push(StringUtil.trim(TextInput(o).text));
							}
						}
					} 
				}
				return result;
			}
			
			private function doClose(): void {
				PopUpManager.removePopUp(this);
			}
		]]>
	</fx:Script>
	
	<s:VGroup>
		<s:Label text="{RS.m_ca_cur}"/>
		<mx:DataGrid dataProvider="{Model.instance().attrs}" rowCount="9" width="230">
			<mx:columns>
				<mx:DataGridColumn dataField="@name" headerText="{RS.m_ca_name}"/>
				<mx:DataGridColumn dataField="@type" headerText="{RS.m_ca_type}"/>
			</mx:columns>
		</mx:DataGrid>
	</s:VGroup>
	
	<mx:Form>
		<mx:FormHeading label="{RS.m_ca_heading}"/>
		
		<mx:FormItem label="{RS.m_ca_type}">
			<s:ComboBox id="typeSelect" requireSelection="true" change="onTypeChange(event);">
				<s:dataProvider>
					<s:ArrayCollection>
						<fx:Object label="{Cst.ATTR_TYPE_STRING}"/>
						<fx:Object label="{Cst.ATTR_TYPE_TEXT}"/>
						<!-- Disable the "list" type now. -->
						<!--<fx:Object label="{Cst.ATTR_TYPE_LIST}"/>-->
						<fx:Object label="{Cst.ATTR_TYPE_ENUM}"/>
						<fx:Object label="{Cst.ATTR_TYPE_NUMBER}"/>
					</s:ArrayCollection>
				</s:dataProvider>
			</s:ComboBox>
		</mx:FormItem>
		
		<mx:FormItem label="{RS.m_ca_name}">
			<s:TextInput id="nameInput" widthInChars="18" maxChars="30"/>
		</mx:FormItem>
		
		<mx:FormItem label="{RS.m_ca_enum}" id="enumValues" includeIn="Enum">
			<s:HGroup>
				<s:TextInput maxChars="{MAX_ENUM_LENGTH}" width="{ENUM_INPUT_WIDTH}"/>
				<s:TextInput maxChars="{MAX_ENUM_LENGTH}" width="{ENUM_INPUT_WIDTH}"/>
			</s:HGroup>
			<s:HGroup>
				<s:TextInput maxChars="{MAX_ENUM_LENGTH}" width="{ENUM_INPUT_WIDTH}"/>
				<s:TextInput maxChars="{MAX_ENUM_LENGTH}" width="{ENUM_INPUT_WIDTH}"/>
			</s:HGroup>
			<mx:LinkButton label="{RS.m_ca_add_row}" click="doAddEnumRow(event);"/>
		</mx:FormItem>
		
		<mx:FormItem label="{RS.m_ca_range}" direction="horizontal" includeIn="Number">
			<s:TextInput id="minInput" width="80" maxChars="20"/>
			<s:Label text="-"/>
			<s:TextInput id="maxInput" width="80" maxChars="20"/>
		</mx:FormItem>
		<mx:FormItem label="{RS.m_ca_unit}" includeIn="Number">
			<s:TextInput id="unitInput" widthInChars="10" maxChars="30"/>
		</mx:FormItem>
		
		<mx:FormItem direction="horizontal">
			<s:Button label="{RS.ok}" click="doAddAttribute();"/>
			<s:Button label="{RS.close}" click="doClose();"/>
		</mx:FormItem>
	</mx:Form>
</s:TitleWindow>
