<?xml version="1.0" encoding="utf-8"?>
<s:TitleWindow xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" width="660" height="580"
			   title="Create a model" xmlns:common="cofm.component.common.*"
			   close="onCancel();">
	<s:states>
		<s:State name="Basic"/>
		<s:State name="EntityBegin" stateGroups="Entity"/>
		<s:State name="TypeSelected" stateGroups="Entity"/>
		<s:State name="AttrSelected" stateGroups="Entity"/>
		<s:State name="Relation"/>
	</s:states>
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import cofm.command.*;
			import cofm.event.*;
			import cofm.model.*;
			import cofm.util.*;
			
			import mx.collections.XMLListCollection;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			
			private static const TO_BE_DELETED: String = "____TO_BE_DELETED____";
			private var typeId: int = 1;
			
			private var selectedTypeId: int;
			
			[Bindable] public var modelName: String;
			
			[Bindable]
			public var entityTypes: XMLListCollection = 
				new XMLListCollection(new XMLList(
					<et><et id={typeId} name="Feature"/></et>));
			
			[Bindable]
			public var entityAttrs: XMLListCollection = 
				new XMLListCollection(new XMLList(
					<et id={typeId}>
						<attr name="Name" type={Cst.ATTR_TYPE_STRING} multi="true" dup="false"/>
						<attr name="Description" type={Cst.ATTR_TYPE_TEXT} multi="true" dup="true"/>
						<attr name="Optionality" type={Cst.ATTR_TYPE_ENUM} multi="false" dup="true">
							<enums>
								<enum>{Cst.VAL_OPT_MAN}</enum>
								<enum>{Cst.VAL_OPT_OPT}</enum>
							</enums>
						</attr>
					</et>));
			
			private static const defaultRelation: XML = 
				<binrel>
					<binrel name={Cst.BIN_REL_REFINES} refine="true" left="Feature" right="Feature"/>
					<binrel name={Cst.BIN_REL_REQUIRES} refine="false" left="Feature" right="Feature"/>
					<binrel name={Cst.BIN_REL_EXCLUDES} refine="false" left="Feature" right="Feature"/>
				</binrel>;
			
			[Bindable]
			public var binRelations: XMLListCollection = new XMLListCollection(defaultRelation.binrel);
			
			// return the root of entityTypes
			private function etRoot(): XML {
				return XML(entityTypes.getItemAt(0));
			}
			
			private function onTypeClicked(evt: ListEvent): void {
				this.currentState = "TypeSelected";	
				
				attrGrid.dataProvider = 
					entityAttrs.source.(@id==String(typeTree.selectedItem.@id))[0].attr;
				
				selectedTypeId = int(typeTree.selectedItem.@id);
			}
			
			private function onNewType(): void {
				var n: XML = <et id={++typeId} name="Enter type name here"/>;
				etRoot().appendChild(n);
				typeTree.selectedItem = n;
				
				entityAttrs.addItem(n.copy());
			}
			
			private function onNewSubtype(): void {
				var n: XML = <et id={++typeId} name="Enter type name here"/>;
				var parent: XML = XML(etRoot()..et.(@id==String(typeTree.selectedItem.@id))[0]);
				parent.appendChild(n);
				//typeTree.selectedItem = n;
				
				// A subtype inherits all attributes from its parent.
				var pid: String = String(parent.@id);
				var parentAttrs: XML = entityAttrs.source.(@id==pid)[0];
				var subAttrs: XML = parentAttrs.copy();
				subAttrs.@id = n.@id;
				entityAttrs.addItem(subAttrs);
			}
			
			private function onDeleteType(): void {
				var enId: String = String(typeTree.selectedItem.@id); 
				// Delete entity type and its attributes
				delete etRoot()..et.(@id==enId)[0];
				delete entityAttrs.source.(@id==enId)[0];
				
				// Force user to select another type to delete or add subtype.
				currentState = "EntityBegin";
			}
			
			private function onAttributeClicked(): void {
				this.currentState = "AttrSelected";
				attrForm.attrXml = XML(attrGrid.selectedItem);
			}
			
			private function onAttributeChanged(): void {
				var cur: XML = attrForm.attrXml;
				if (this.currentState == "AttrSelected") {
					// Replace the selected attribute with the edited one.
					var old: XML = XML(attrGrid.selectedItem);
					old.@name = cur.@name;
					old.@type = cur.@type;
					old.@multi = cur.@multi;
					old.@dup = cur.@dup;
					old.setChildren(cur.children());
					
				} else {
					// Add the new attribute
					XML(entityAttrs.source.(@id==selectedTypeId)[0]).appendChild(cur.copy());
					attrGrid.dataProvider = 
						entityAttrs.source.(@id==selectedTypeId)[0].attr;
				}
				this.currentState = "TypeSelected";
			}
			
			private function onBack(): void {
				switch (this.currentState) {
					case "EntityBegin":
					case "TypeSelected":
					case "AttrSelected":
						this.currentState = "Basic";
						break;
					case "Relation":
						this.currentState = "EntityBegin";
						break;
				}
			}
			
			private function onNext(): void {
				switch (this.currentState) {
					case "Basic":
						this.currentState = "EntityBegin";
						break;
					case "EntityBegin":
					case "TypeSelected":
					case "AttrSelected":
						this.currentState = "Relation";
						break;
					case "Relation":
						doCreateFeature();
						break;
				}	
			}
			
			private function onCancel(): void {
				PopUpManager.removePopUp(this);
			}
			
			private function doCreateFeature(): void {
				//new CreateModelCommand(modelName.text, modelDes.text).execute();
			}
			
		]]>
	</fx:Script>
	<mx:Form width="100%" height="490" includeIn="Basic">
		<mx:FormHeading label="Basic Information"/>
		<mx:FormItem label="Name">
			<s:TextInput widthInChars="20" id="nameInput" text="{modelName}"/>
		</mx:FormItem>
		<mx:FormItem label="Intro">
			<s:TextArea width="300" height="152" id="introInput"/>
		</mx:FormItem>
	</mx:Form>
	
	<s:VGroup width="100%" height="400" includeIn="Entity" paddingTop="10">
		<s:Label fontSize="12" top="5" left="5" text="Define the types of entities in this model."/>
		<s:HGroup width="100%" height="100%">
			<s:VGroup width="50%" height="100%">
				<s:HGroup>
					<s:Button label="New Type" click="onNewType();"/>
					<s:Button label="New Subtype" 
							  enabled="true" enabled.EntityBegin="false" 
							  click="onNewSubtype();"/>
					<s:Button label="Delete Type"
							  enabled="true" enabled.EntityBegin="false"
							  click="onDeleteType();"/>
				</s:HGroup>
				<s:Label fontWeight="bold" text="Current types:"/>
				<mx:Tree id="typeTree" dataProvider="{entityTypes}"
						 borderStyle="solid" width="100%" height="100%"
						 labelField="@name" itemClick="onTypeClicked(event);"
						 editable="true" showRoot="false"/>
			</s:VGroup>
			
			<s:VGroup width="50%" height="100%" includeIn="AttrSelected, TypeSelected">
				<s:Label fontWeight="bold" text="Attributes: "/>
				
			    <mx:DataGrid id="attrGrid" rowCount="6" itemClick="onAttributeClicked();"
							 width="100%">
					<mx:columns>
						<mx:DataGridColumn dataField="@name" headerText="Name" />
						<mx:DataGridColumn dataField="@type" headerText="Type" />
					</mx:columns>
				</mx:DataGrid>
				<s:Label fontWeight="bold" 
						 text.TypeSelected="Add attribute: "
						 text.AttrSelected="Edit attribute: "/>
				<common:AttributeForm id="attrForm" submit="onAttributeChanged();"/>
			</s:VGroup>
		</s:HGroup>
	</s:VGroup>
	
	<s:VGroup width="100%" height="400" paddingTop="10" includeIn="Relation">
		<s:Label text="Define the types of relationships in this model. (Only binary relation now.)"/>
		
		<mx:DataGrid id="relationGrid" rowCount="10" width="100%"
					 dataProvider="{binRelations}">
			<mx:columns>
				<mx:DataGridColumn dataField="@name" headerText="Name"/>
				<mx:DataGridColumn dataField="@refine" headerText="Is Refinement"/>
				<mx:DataGridColumn dataField="@left" headerText="Entity 1">
				</mx:DataGridColumn>
				<mx:DataGridColumn dataField="@right" headerText="Entity 2"/>
			</mx:columns>
		</mx:DataGrid>
	</s:VGroup>
	
	<mx:Canvas height="30" width="100%" bottom="10">
		<s:HGroup right="10">
			<s:Button label="&lt; Back" enabled.Basic="false" click="onBack();"/>
			<s:Button label="Next &gt;" label.Relation="Finish" click="onNext();"/>
			<s:Button label="Cancel" click="onCancel();"/>
		</s:HGroup>
	</mx:Canvas>
	
</s:TitleWindow>
