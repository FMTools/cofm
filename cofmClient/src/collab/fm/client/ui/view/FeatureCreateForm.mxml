<?xml version="1.0" encoding="utf-8"?>
<mx:Form xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:a="com.hillelcoren.components.*"
	width="700" height="400"
	creationComplete="initView()">
	
	<mx:FormHeading label="{RS.BTN_CREATE_FEATURE}" />
		
		<mx:FormItem label="{RS.FEATURE_CREATE_NAME}">
			<a:AutoComplete id="nameInput" allowMultipleSelection="false"
				 allowNewValues="true" allowEditingNewValues="true"
				 matchType="word" selectedItemStyleName="none"
				 labelField="name"
				 dataProvider="{FeatureNameList.instance.data}"
				 valueCommit="checkDuplicateName();"
				 width="150" />
		</mx:FormItem>
		
		<mx:FormItem label="{RS.FEATURE_CREATE_PARENT}" >
			<mx:RadioButtonGroup id="parentSwitch" itemClick="onParentSwitch(event);" />
			<mx:RadioButton groupName="parentSwitch" value="None" label="{RS.FEATURE_CREATE_PARENT_IS_ROOT}" />
			<mx:HBox>
				<mx:RadioButton groupName="parentSwitch" value="Exist"
					label="{RS.FEATURE_CREATE_PARENT_CHOOSE}"
				    paddingRight="0"/>
				<a:AutoComplete id="parentInput" allowMultipleSelection="false"
					 allowNewValues="false" matchType="word" selectedItemStyleName="none" width="150"
					 labelField="name"
					 dataProvider="{FeatureNameList.instance.data}"
					 activate="onInputParent();"
					 click="onInputParent();"
					 valueCommit="onSelectParent();"
					 prompt="{RS.FEATURE_CREATE_PARENT_SEARCH}"/>
			</mx:HBox>
		</mx:FormItem>
		
		<mx:FormItem label="{RS.FEATURE_CREATE_DES}" >
			<mx:TextArea id="desInput" width="300" height="200" />
		</mx:FormItem>
		
		<mx:FormItem direction="horizontal">
			<mx:Button id="cOK" label="{RS.BTN_OK}" click="endCreateFeature();"/>
			<mx:Button label="{RS.BTN_CANCEL}" click="cancel();"/>
		</mx:FormItem>
		
		<mx:Script>
		<![CDATA[
			import mx.events.ItemClickEvent;
			import collab.fm.client.util.*;		
			import collab.fm.client.event.*;	
			import collab.fm.client.data.*;
			import collab.fm.client.command.*;
			
			private var parentId: int;
			private var nameOk: Boolean;
			private var parentOk: Boolean;
			
			public function resetForm(): void {
				nameInput.text = "";
				parentSwitch.selectedValue = "";
				parentId = -1;
				cOK.enabled = false;
			}
			
			private function initView(): void {
				ClientEvtDispatcher.instance().addEventListener(
					FeatureSelectEvent.CLICK_ON_TREE, onChooseParentFromTree);
				ClientEvtDispatcher.instance().addEventListener(
					ModelMinorChangeEvent.FEATURE_CREATED_LOCALLY, onFeatureCreatedLocally);
			}
			
			private function nameValid(nameOk: Boolean): void{ 
				this.nameOk = nameOk;
				if (this.nameOk && this.parentOk) {
					cOK.enabled = true;
				} else {
					cOK.enabled = false;
				}
				//trace("nameOK: " + this.nameOk + ", parentOK: " + this.parentOk);
			}
			
			private function parentValid(parentOk: Boolean): void {
				this.parentOk = parentOk;
				if (this.nameOk && this.parentOk) {
					cOK.enabled = true;
				} else {
					cOK.enabled = false;
				}
				//trace("nameOK: " + this.nameOk + ", parentOK: " + this.parentOk);
			}
						
			private function cancel(): void {
				UIUtil.show(this, false);
			}
			
			private function endCreateFeature(): void {
				UIUtil.show(this, false);
				// 1. commit create_feature and create_relationship
				new CreateOrVoteFeatureCommand(nameInput.text).execute();
				// 2. open the properties editing form for the created feature.
			}
			
			private function onFeatureCreatedLocally(evt: ModelMinorChangeEvent): void {
				if (parentId >= 0) {
					trace("Create relation in creation form: " + parentId + " refined by " + int(evt.data));
					new CreateOrVoteBinaryRelationshipCommand(
						Cst.BIN_REL_REFINES, parentId, int(evt.data)).execute();
				}
			}
			
			private function checkDuplicateName(): void {
				if (FeatureNameList.instance.contains(nameInput.text)) {
					this.nameValid(false);
				} else {
					this.nameValid(true);
				}
			}
			
			private function onInputParent(): void {
				//trace("onInputParent");
				parentSwitch.selectedValue = "Exist";
				this.parentValid(false);
			}
			
			private function onParentSwitch(evt: ItemClickEvent): void {
				//trace("onParentSwitch");
				parentId = -1;
				if (evt.currentTarget.selectedValue == "None") {
					this.parentValid(true);
				} else {
					this.parentValid(false);
				}
			}
			
			private function onChooseParentFromTree(evt: FeatureSelectEvent): void {
				//trace("onChooseParentFromTree");
				parentSwitch.selectedValue = "Exist";
				parentInput.text = evt.name;
				parentId = evt.id;
				this.parentValid(true);
			}
			
			private function onSelectParent(): void {
				// See FeatureNameList for details about the selected item.
				//trace("onSelectParent");
				if (!this.parentOk) {
					if (!parentInput.selectedItem) {
						parentId = -1;
						this.parentValid(false);
					} else {
						parentId = parentInput.selectedItem["id"];
						this.parentValid(true);
					}
				}
			}
		]]>
	</mx:Script>
</mx:Form>
