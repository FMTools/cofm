<?xml version="1.0" encoding="utf-8"?>
<mx:Application xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:p="collab.fm.client.ui.perspective.*" 
	xmlns:v="collab.fm.client.ui.view.*"
	layout="absolute" minWidth="1024" minHeight="680"
 	backgroundColor="white"
    paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0"
    verticalScrollPolicy="off" horizontalScrollPolicy="off"
    creationComplete="initView()">
	<mx:Style>
    Tree {
        folderClosedIcon: ClassReference(null);
        folderOpenIcon: ClassReference(null);
        defaultLeafIcon: ClassReference(null);
    }
	</mx:Style>
	
	<mx:VBox id="appContainer" width="{Size.APP_W}" height="{Size.APP_H}" horizontalCenter="0"
		 paddingBottom="0" paddingLeft="0" paddingRight="0" paddingTop="0">
		
		<mx:ApplicationControlBar id="appCB" width="100%" height="{Size.APP_BAR_H}">
			<mx:Canvas width="100%" height="100%" 
				 verticalScrollPolicy="off" horizontalScrollPolicy="off">
				 
				<mx:HBox width="100%">
					<mx:LinkButton paddingLeft="0" paddingRight="0" 
						label="{RS.BTN_FEEDBACK}" click="doFeedback();" />
					<mx:LinkButton paddingLeft="0" paddingRight="0" 
						label="{RS.BTN_BACK_TO_HOME}" click="backToHomePage();" id="btnBack" />
					<v:MessageBar width="300"/>
				</mx:HBox>
				<mx:HBox right="4">
					<mx:Label id="userName" paddingTop="2" paddingRight="10" />
					<mx:LinkButton id="btnLogin" paddingLeft="0" paddingRight="0"
					    label="{RS.BTN_LOGIN}" click="showLogin();" />
					<mx:LinkButton id="btnReg" paddingLeft="0" paddingRight="0"
					    label="{RS.BTN_REGISTER}" click="showRegister();" />
					<mx:LinkButton id="btnLogout" paddingLeft="0" paddingRight="0"
					    label="{RS.BTN_LOGOUT}" click="logout();" />
				</mx:HBox>			
			</mx:Canvas>
			
		</mx:ApplicationControlBar>
		
		<p:EntryPerspective id="entry" width="100%" height="100%" 
			verticalScrollPolicy="off" horizontalScrollPolicy="off" />
			
		<p:WorkPerspective id="work" width="100%" height="100%"
			verticalScrollPolicy="off" horizontalScrollPolicy="off" />
			
	</mx:VBox>
	
	<mx:Script>
		<![CDATA[
			import collab.fm.client.command.ExitModelCommand;
			import collab.fm.client.ui.view.FeedBackDlg;
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import collab.fm.client.command.LogoutCommand;
			import collab.fm.client.ui.view.RegisterDlg;
			import mx.managers.PopUpManager;
			
			import collab.fm.client.ui.view.LoginDlg;
			import flash.net.navigateToURL;
			import collab.fm.client.ui.view.ModelSearchAndCreateForm;
			import collab.fm.client.event.*;
			import collab.fm.client.util.*;
			import collab.fm.client.data.*;

			public static const HOME_PAGE: int = 1;
			public static const WORK_PAGE: int = 2;
			
			private var dlgLogin: LoginDlg;
			private var dlgReg: RegisterDlg;
			private var dlgFeedback: FeedBackDlg;
			
			private var currentPage: int;
			
			private function initView(): void {
				currentPage = HOME_PAGE;
				UIUtil.show(work, false);
				UIUtil.show(btnBack, false);
				UIUtil.show(btnLogin, false);
				UIUtil.show(btnReg, false);
				UIUtil.show(btnLogout, false);
				ClientEvtDispatcher.instance().addEventListener(ModelSelectEvent.SELECTED, onModelSelect);
				ClientEvtDispatcher.instance().addEventListener(ModelUpdateEvent.WORKING_VIEW_COMPLETE, onWorkingViewComplete);
				ClientEvtDispatcher.instance().addEventListener(LoginEvent.SUCCESS, onLogin);
				ClientEvtDispatcher.instance().addEventListener(LogoutEvent.LOGGED_OUT, onLogout);
				ClientEvtDispatcher.instance().addEventListener(ModelSearchEvent.SUCCESS, onModelListed);
				ClientEvtDispatcher.instance().addEventListener(PageSwitchEvent.ENTER_HOME_PAGE, onInitHome);
				initData();
				userName.text = "";
			}
			
			private function initData(): void {
				FeatureModel.instance.features;
				CurrentFeature.instance.id;
				FeatureNameList.instance.data;
				ModelCollection.instance.others;
				UserList.instance.myId;
				//Trees
				GlobalTreeData.instance.xml;
				WorkingTreeData.instance.xml;
				PersonalTreeData.instance.xml;
			}
			
			private function backToHomePage(): void {
				new ExitModelCommand(ModelCollection.instance.currentModelId).execute();
				refreshHomePage();
				Console.info("Client - Back to home page.");
			}
			
			private function refreshHomePage(): void {
				ClientEvtDispatcher.instance().dispatchEvent(new PageSwitchEvent(PageSwitchEvent.RETURN_TO_HOME_PAGE));
				ModelListUpdater.instance.update();
			}
			
			private function onModelListed(evt: ModelSearchEvent): void {
				if (currentPage == WORK_PAGE) {
					UIUtil.show(btnBack, false);
					UIUtil.show(work, false);
					UIUtil.show(entry, true);
					ModelCollection.instance.currentModelId = -1;
					currentPage = HOME_PAGE;
				}
			}
			
			private function onInitHome(evt: PageSwitchEvent): void {
				if (evt.type == PageSwitchEvent.ENTER_HOME_PAGE) {
					UIUtil.show(btnLogin, true);
					UIUtil.show(btnReg, true);
					UIUtil.show(btnLogout, false);
				}
			}
			
			private function onModelSelect(evt: ModelSelectEvent): void {
				UIUtil.show(entry, false);
				work.initData(evt.modelId);
			}
			
			private function onWorkingViewComplete(evt: ModelUpdateEvent): void {
				UIUtil.show(work, true);
				UIUtil.show(btnBack, true);
				currentPage = WORK_PAGE;
				Console.info("Client - Entered work page.");
			}
			
			private function onLogin(evt: LoginEvent): void {
				userName.text = evt.myName;
				// Hide the login and register buttons after logging in.
				UIUtil.show(btnLogin, false);
				UIUtil.show(btnReg, false);
				UIUtil.show(btnLogout, true);
			}
			
			private function onLogout(evt: LogoutEvent): void {
				if (evt.user == UserList.instance.myId) {
					UserList.instance.isLogin = false;
					UserList.instance.myId = -1;
					UserList.instance.myName = "";
					userName.text = "";
					UIUtil.show(btnLogin, true);
					UIUtil.show(btnReg, true);
					UIUtil.show(btnLogout, false);
					refreshHomePage();
					Console.info("Client - User has logged out.");
				}
			}
			
			private function doFeedback(): void {
				dlgFeedback = FeedBackDlg(PopUpManager.createPopUp(this, FeedBackDlg, true));
				PopUpManager.centerPopUp(dlgFeedback);
			}
			
			private function showLogin(): void {
				dlgLogin = LoginDlg(PopUpManager.createPopUp(this, LoginDlg, true));
				PopUpManager.centerPopUp(dlgLogin);
			}
			
			private function showRegister(): void {
				dlgReg = RegisterDlg(PopUpManager.createPopUp(this, RegisterDlg, true));
				PopUpManager.centerPopUp(dlgReg);
			}
			
			private function logout(): void {
				if (currentPage == WORK_PAGE) {
					Alert.show(RS.DLG_LOGOUT_CONFIRM_TEXT, RS.DLG_LOGOUT_CONFIRM_TITLE,
						Alert.YES | Alert.NO, this, onLogoutConfirm, null, Alert.YES); 
				} else {
					doLogout();
				}
			}
			
			private function onLogoutConfirm(evt: CloseEvent): void {
				if (evt.detail == Alert.YES) {
					doLogout();
				}
			}
			
			private function doLogout(): void {
				new LogoutCommand().execute();
			}
			
		]]>
	</mx:Script>

</mx:Application>
