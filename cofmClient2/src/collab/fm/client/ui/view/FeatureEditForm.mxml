<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:v="collab.fm.client.ui.view.*"
    implements="collab.fm.client.data.IOperationListener"
    creationComplete="initView();">
    
    <mx:TabNavigator id="infoTab" selectedIndex="0" paddingTop="2">
    	
	</mx:TabNavigator>
    
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import flash.utils.Dictionary;
			import collab.fm.client.command.*;
			import collab.fm.client.data.*;
			import collab.fm.client.event.*;
			import collab.fm.client.util.*;
			
			//private var nameWindow: AddNameDlg;
			//private var desWindow: AddDesDlg;
			
			private var featureId: int;
			private var displayedAttrs: Dictionary;
			
//			private function addName(): void {
//				nameWindow = AddNameDlg(PopUpManager.createPopUp(this, AddNameDlg, true));
//				PopUpManager.centerPopUp(nameWindow);
//			}
//			
//			private function addDes(): void {
//				desWindow = AddDesDlg(PopUpManager.createPopUp(this, AddDesDlg, true));
//				PopUpManager.centerPopUp(desWindow);
//			}
			
			private function initView(): void {
				FeatureModel.instance.registerSubView(this);
				ClientEvtDispatcher.instance().addEventListener(
					FeatureSelectEvent.DB_CLICK_ON_TREE, onSelect);
				ClientEvtDispatcher.instance().addEventListener(
					ClientEvent.CURRENT_FEATURE_DELETED, onDelete);
				trace ("FeatureEditForm inited.");
				
			}
			
			private function onSelect(evt: FeatureSelectEvent): void {
				trace ("FeatureEditForm - begin selected.(id=" + evt.id + ")");
				if (this.featureId == evt.id) {
					return;
				}
				this.featureId = evt.id;
				this.reloadAllTabs();
			}
			
			private function onDelete(evt: ClientEvent): void {
			}
			
			private function reloadAllTabs(): void {
				infoTab.removeAllChildren();
				this.displayedAttrs = new Dictionary();
				var fs: XMLList = FeatureModel.instance.features.source.(@id==String(this.featureId));
				if (fs.length() <= 0) {
					return;
				}
				
				// Add basic info tab first
				var basic: FeatureBasicInfoTab = new FeatureBasicInfoTab();
				basic.label = RS.EDIT_TAB_BASIC;
				setTabSize(basic);
				infoTab.addChild(basic);
				
				trace ("*****Basic info added.");
				
				// Add name, description and optionality
				addTab(fs[0].attrs.attr.(@name==Cst.ATTR_FEATURE_NAME)[0]);
				addTab(fs[0].attrs.attr.(@name==Cst.ATTR_FEATURE_DES)[0]);	
				addTab(fs[0].attrs.attr.(@name==Cst.ATTR_FEATURE_OPT)[0]);
				
				// Add refinement and binary constraints
				var refine: RefinementTab = new RefinementTab();
				refine.label = RS.EDIT_TAB_REFINE;
				setTabSize(refine);
				infoTab.addChild(refine);
				
				var cons: BinConstraintTab = new BinConstraintTab();
				cons.label = RS.EDIT_TAB_CONS;
				setTabSize(cons);
				infoTab.addChild(cons);
				
				// Add other tabs
				for each (var attr: Object in fs[0].attrs.attr) {
					if (attr.@name == Cst.ATTR_FEATURE_DES ||
						attr.@name == Cst.ATTR_FEATURE_NAME ||
						attr.@name == Cst.ATTR_FEATURE_OPT) {
							continue;
					}
					addTab(attr);
				}
			}
			
			private function addTab(attr: Object): void {
				switch (String(attr.@type)) {
					case Cst.ATTR_TYPE_ENUM:
						infoTab.addChild(createEnumTab(attr));
						break;
					case Cst.ATTR_TYPE_LIST:
						infoTab.addChild(createListTab(attr));
						break;
					case Cst.ATTR_TYPE_NUMBER:
						infoTab.addChild(createNumberTab(attr));
						break;
					case Cst.ATTR_TYPE_STRING:
						infoTab.addChild(createStrTab(attr));
						break;
					case Cst.ATTR_TYPE_TEXT:
						infoTab.addChild(createTextTab(attr));
						break;
				}
			}
			
			private function setTabSize(tab: DisplayObject): void {
				tab.width = Size.EDITOR_W;
				tab.height = Size.EDITOR_H;
			}
			
			private function createEnumTab(attr: Object): EnumTab {
				trace ("FeatureEditForm - createEnumTab. attr = " + XML(attr).toXMLString());
				var tab: EnumTab = new EnumTab();
				tab.label = attr.@name;
				tab.attrName = attr.@name;
				tab.enums = attr.enums.enum;
				setTabSize(tab);
				tab.updateValues(attr.values.value);
				this.displayedAttrs[attr.@name] = tab;
				return tab;
			}
			
			private function createListTab(attr: Object): ListTab {
				var tab: ListTab = new ListTab();
				tab.label = attr.@name;
				tab.attrName = attr.@name;
				setTabSize(tab);
				tab.updateValues(attr.values.value);
				this.displayedAttrs[attr.@name] = tab;
				return tab;
			}
			
			private function createNumberTab(attr: Object): NumberTab {
				var tab: NumberTab = new NumberTab();
				tab.label = attr.@name;
				tab.attrName = attr.@name;
				tab.unit = XML(attr.unit).text().toString();
				tab.min = Number(XML(attr.min).text().toString());
				tab.max = Number(XML(attr.max).text().toString());
				setTabSize(tab);
				tab.updateValues(attr.values.value);
				this.displayedAttrs[attr.@name] = tab;
				return tab;
			}
			
			private function createStrTab(attr: Object): StringTab {
				var tab: StringTab = new StringTab();
				tab.label = attr.@name;
				tab.attrName = attr.@name;
				setTabSize(tab);
				tab.updateValues(attr.values.value);
				this.displayedAttrs[attr.@name] = tab;
				return tab;
			}
			
			private function createTextTab(attr: Object): TextTab {
				var tab: TextTab = new TextTab();
				tab.label = attr.@name;
				tab.attrName = attr.@name;
				setTabSize(tab);
				tab.updateValues(attr.values.value);
				this.displayedAttrs[attr.@name] = tab;
				return tab;
			}
			
			
			// IOperationListener methods
			//
			public function handleVoteAddFeature(op: Object): void {
				// Only handles the removal of current feature
				if (op["featureId"] == String(this.featureId) &&
					op[FeatureModel.SHOULD_DELETE_ELEMENT] == true) {
					infoTab.removeAllChildren();
				}
			}
			
			public function handleVoteAddBinRel(op: Object): void{
				// Do nothing (the relationship tabs will update themselves.)
			}
		
			public function handleAddAttribute(op: Object): void {
				// Do nothing (only add tab when creating new values)
			}
			
			public function handleAddEnumAttribute(op: Object): void {
				// Do nothing
			}
			
			public function handleAddNumericAttribute(op: Object): void {
				// Do nothing
			}
			
			public function handleVoteAddValue(op: Object): void {
				if (op["featureId"] == String(this.featureId)) {
					var a: XMLList = 
							FeatureModel.instance.features.source.(@id==op["featureId"])..attr.(@name==op["attr"]);
					if (a.length() <= 0) {
						return;
					}
					if (this.displayedAttrs[op["attr"]] == null) {
						this.addTab(a[0]);
					} else {
						var tab: IAttributeDisplayer = IAttributeDisplayer(this.displayedAttrs[op["attr"]]);
						tab.updateValues(a[0].values.value);
					}
				}
			}
			
			public function handleInferVoteOnFeature(op: Object): void {
				// Do nothing (because only YES votes can be inferred, and this change can be updated in 
				// Basic Info Tab
			}
			
			public function handleInferVoteOnRelation(op: Object): void {
				// Do nothing (Changes will be reflected in relationship tabs)
			}
		
		]]>
	</mx:Script>
</mx:VBox>
